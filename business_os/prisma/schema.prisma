// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User model con roles
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  roleId        String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  tasks         Task[]    @relation("AssignedTasks")  // Tareas asignadas al usuario
  createdTasks  Task[]    @relation("TaskCreator")   // Tareas creadas por el usuario
  projects      Project[] @relation("ProjectMembers")
  ownedProjects Project[] @relation("ProjectOwner")
  role          Role      @relation(fields: [roleId], references: [id])
  comments      Comment[] 
  activities    Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Sistema de roles y permisos
model Role {
  id          String       @id
  name        String
  description String?
  users       User[]
  permissions Permission[]
}

model Permission {
  id          String  @id @default(cuid())
  action      String  // create, read, update, delete
  subject     String  // task, project, user
  description String?
  roles       Role[]
}

// Modelo de tareas
model Task {
  id           String   @id @default(cuid())
  title        String
  description  String?
  status       String   @default("pending") // pending, in-progress, completed
  priority     String   @default("medium") // low, medium, high
  dueDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relaciones
  assigneeId   String?
  creatorId    String
  projectId    String?
  
  assignee     User?    @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator      User     @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  project      Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  comments     Comment[]
  activities   Activity[]
}

// Modelo de proyectos
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("active") // active, archived, completed
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     User[]   @relation("ProjectMembers")
  tasks       Task[]
}

// Modelo para comentarios en tareas
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  taskId    String
  userId    String
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo para actividades y seguimiento
model Activity {
  id          String   @id @default(cuid())
  action      String   // created, updated, commented, status_changed, etc.
  details     String?
  createdAt   DateTime @default(now())
  
  userId      String
  taskId      String
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
